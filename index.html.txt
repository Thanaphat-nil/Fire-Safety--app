<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fire Safety Checklist System v17 - Ultimate Edition</title>
    <style>
        body {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #li667eea 0%, #764ba2 100%);
            min-height: 100%;
        }

        html {
            height: 100%;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            min-height: calc(100% - 40px);
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            text-align: center;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .fire-icon {
            font-size: 4rem;
            margin-bottom: 20px;
            display: block;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        .title {
            font-size: 2.5rem;
            font-weight: bold;
            color: #2c3e50;
            margin: 0 0 10px 0;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
        }

        .subtitle {
            font-size: 1.2rem;
            color: #7f8c8d;
            margin: 0;
        }

        .version-badge {
            display: inline-block;
            background: linear-gradient(45deg, #ff6b6b, #ee5a24);
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: bold;
            margin-top: 15px;
            box-shadow: 0 4px 15px rgba(238, 90, 36, 0.3);
        }

        .login-container, .main-content {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 40px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .form-group {
            margin-bottom: 25px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #2c3e50;
            font-size: 1.1rem;
        }

        input[type="text"], input[type="password"], textarea, select {
            width: 100%;
            padding: 15px 20px;
            border: 2px solid #e0e6ed;
            border-radius: 12px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.9);
            box-sizing: border-box;
        }

        input[type="text"]:focus, input[type="password"]:focus, textarea:focus, select:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            transform: translateY(-2px);
        }

        .btn {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 12px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 12px 35px rgba(102, 126, 234, 0.4);
        }

        .btn:active {
            transform: translateY(-1px);
        }

        .btn-secondary {
            background: linear-gradient(45deg, #95a5a6, #7f8c8d);
            box-shadow: 0 8px 25px rgba(149, 165, 166, 0.3);
        }

        .btn-danger {
            background: linear-gradient(45deg, #e74c3c, #c0392b);
            box-shadow: 0 8px 25px rgba(231, 76, 60, 0.3);
        }

        .btn-success {
            background: linear-gradient(45deg, #27ae60, #2ecc71);
            box-shadow: 0 8px 25px rgba(39, 174, 96, 0.3);
        }

        .nav-tabs {
            display: flex;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 5px;
            margin-bottom: 30px;
            backdrop-filter: blur(10px);
        }

        .nav-tab {
            flex: 1;
            padding: 15px 20px;
            text-align: center;
            background: transparent;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            color: #2c3e50;
            font-weight: 600;
            font-size: 1rem;
        }

        .nav-tab.active {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
            animation: fadeIn 0.5s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 25px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);
            transition: transform 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
        }

        .stat-number {
            font-size: 2.5rem;
            font-weight: bold;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
        }

        .stat-label {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        .checklist-item {
            background: rgba(255, 255, 255, 0.9);
            border: 2px solid #e0e6ed;
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 20px;
            transition: all 0.3s ease;
            backdrop-filter: blur(5px);
        }

        .checklist-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }

        .checklist-item.completed {
            border-color: #27ae60;
            background: linear-gradient(135deg, rgba(39, 174, 96, 0.1), rgba(46, 204, 113, 0.1));
        }

        .checklist-item.failed {
            border-color: #e74c3c;
            background: linear-gradient(135deg, rgba(231, 76, 60, 0.1), rgba(192, 57, 43, 0.1));
        }

        .item-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .item-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: #2c3e50;
        }

        .item-number {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            width: 35px;
            height: 35px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 1.1rem;
        }

        .item-description {
            color: #7f8c8d;
            margin-bottom: 20px;
            line-height: 1.6;
        }

        .item-controls {
            display: flex;
            gap: 15px;
            align-items: center;
            flex-wrap: wrap;
        }

        .status-buttons {
            display: flex;
            gap: 10px;
        }

        .status-btn {
            padding: 10px 20px;
            border: 2px solid;
            border-radius: 25px;
            background: transparent;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            font-size: 0.9rem;
        }

        .status-btn.normal {
            border-color: #27ae60;
            color: #27ae60;
        }

        .status-btn.normal.active {
            background: #27ae60;
            color: white;
            box-shadow: 0 5px 15px rgba(39, 174, 96, 0.3);
        }

        .status-btn.abnormal {
            border-color: #e74c3c;
            color: #e74c3c;
        }

        .status-btn.abnormal.active {
            background: #e74c3c;
            color: white;
            box-shadow: 0 5px 15px rgba(231, 76, 60, 0.3);
        }

        .notes-input {
            flex: 1;
            min-width: 200px;
        }

        .progress-container {
            background: rgba(255, 255, 255, 0.9);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 30px;
            backdrop-filter: blur(5px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }

        .progress-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .progress-title {
            font-size: 1.3rem;
            font-weight: 600;
            color: #2c3e50;
        }

        .progress-percentage {
            font-size: 1.5rem;
            font-weight: bold;
            color: #667eea;
        }

        .progress-bar {
            width: 100%;
            height: 12px;
            background: #e0e6ed;
            border-radius: 6px;
            overflow: hidden;
            margin-bottom: 15px;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #667eea, #764ba2);
            border-radius: 6px;
            transition: width 0.5s ease;
            box-shadow: 0 2px 10px rgba(102, 126, 234, 0.3);
        }

        .progress-stats {
            display: flex;
            justify-content: space-between;
            font-size: 0.9rem;
            color: #7f8c8d;
        }

        .action-buttons {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin-top: 30px;
            flex-wrap: wrap;
        }

        .report-section {
            background: rgba(255, 255, 255, 0.9);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 20px;
            backdrop-filter: blur(5px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }

        .report-header {
            border-bottom: 2px solid #e0e6ed;
            padding-bottom: 15px;
            margin-bottom: 20px;
        }

        .report-title {
            font-size: 1.4rem;
            font-weight: bold;
            color: #2c3e50;
            margin: 0;
        }

        .report-date {
            color: #7f8c8d;
            font-size: 0.9rem;
            margin-top: 5px;
        }

        .report-summary {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-bottom: 25px;
        }

        .summary-item {
            text-align: center;
            padding: 15px;
            border-radius: 10px;
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
        }

        .summary-number {
            font-size: 1.8rem;
            font-weight: bold;
            color: #2c3e50;
        }

        .summary-label {
            font-size: 0.9rem;
            color: #7f8c8d;
            margin-top: 5px;
        }

        .report-details {
            margin-top: 20px;
        }

        .detail-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 0;
            border-bottom: 1px solid #e0e6ed;
        }

        .detail-item:last-child {
            border-bottom: none;
        }

        .detail-name {
            font-weight: 600;
            color: #2c3e50;
        }

        .detail-status {
            padding: 5px 12px;
            border-radius: 15px;
            font-size: 0.8rem;
            font-weight: 600;
        }

        .detail-status.normal {
            background: #d4edda;
            color: #155724;
        }

        .detail-status.abnormal {
            background: #f8d7da;
            color: #721c24;
        }

        .detail-status.pending {
            background: #fff3cd;
            color: #856404;
        }

        .logout-btn {
            position: fixed;
            top: 20px;
            right: 20px;
            background: linear-gradient(45deg, #e74c3c, #c0392b);
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 25px;
            cursor: pointer;
            font-weight: 600;
            box-shadow: 0 5px 15px rgba(231, 76, 60, 0.3);
            transition: all 0.3s ease;
            z-index: 1000;
        }

        .logout-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(231, 76, 60, 0.4);
        }

        .hidden {
            display: none !important;
        }

        @media (max-width: 768px) {
            .container {
                padding: 15px;
            }

            .header {
                padding: 20px;
            }

            .title {
                font-size: 2rem;
            }

            .fire-icon {
                font-size: 3rem;
            }

            .login-container, .main-content {
                padding: 25px;
            }

            .nav-tabs {
                flex-direction: column;
                gap: 5px;
            }

            .stats-grid {
                grid-template-columns: 1fr;
            }

            .item-controls {
                flex-direction: column;
                align-items: stretch;
            }

            .status-buttons {
                justify-content: center;
            }

            .action-buttons {
                flex-direction: column;
            }

            .logout-btn {
                position: static;
                margin: 20px auto;
                display: block;
                width: fit-content;
            }
        }

        .notification {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: linear-gradient(45deg, #27ae60, #2ecc71);
            color: white;
            padding: 15px 25px;
            border-radius: 10px;
            box-shadow: 0 10px 30px rgba(39, 174, 96, 0.3);
            z-index: 1001;
            opacity: 0;
            transition: all 0.3s ease;
        }

        .notification.show {
            opacity: 1;
            transform: translateX(-50%) translateY(0);
        }

        .notification.error {
            background: linear-gradient(45deg, #e74c3c, #c0392b);
            box-shadow: 0 10px 30px rgba(231, 76, 60, 0.3);
        }

        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }

        .modal.show {
            opacity: 1;
            visibility: visible;
        }

        .modal-content {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            max-width: 600px;
            width: 90%;
            max-height: 90%;
            overflow-y: auto;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transform: scale(0.9);
            transition: transform 0.3s ease;
        }

        .modal.show .modal-content {
            transform: scale(1);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            padding-bottom: 15px;
            border-bottom: 2px solid #e0e6ed;
        }

        .modal-header h3 {
            margin: 0;
            color: #2c3e50;
            font-size: 1.4rem;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #7f8c8d;
            padding: 5px;
            border-radius: 50%;
            width: 35px;
            height: 35px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }

        .close-btn:hover {
            background: #e74c3c;
            color: white;
        }

        .extinguisher-item, .location-item {
            background: rgba(255, 255, 255, 0.9);
            border: 2px solid #e0e6ed;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 15px;
            transition: all 0.3s ease;
        }

        .extinguisher-item:hover, .location-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }

        .item-info {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 15px;
        }

        .info-label {
            font-weight: 600;
            color: #2c3e50;
            font-size: 0.9rem;
        }

        .info-value {
            color: #7f8c8d;
            font-size: 0.9rem;
        }

        .item-actions {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
        }

        .btn-small {
            padding: 8px 15px;
            font-size: 0.8rem;
            border-radius: 8px;
        }

        .status-badge {
            display: inline-block;
            padding: 4px 12px;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: 600;
        }

        .status-badge.active {
            background: #d4edda;
            color: #155724;
        }

        .status-badge.expired {
            background: #f8d7da;
            color: #721c24;
        }

        .status-badge.maintenance {
            background: #fff3cd;
            color: #856404;
        }

        .status-badge.damaged {
            background: #f5c6cb;
            color: #721c24;
        }

        .status-badge.low {
            background: #d4edda;
            color: #155724;
        }

        .status-badge.medium {
            background: #fff3cd;
            color: #856404;
        }

        .status-badge.high {
            background: #f8d7da;
            color: #721c24;
        }

        .status-badge.critical {
            background: #f5c6cb;
            color: #721c24;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <span class="fire-icon">🧯</span>
            <h1 class="title">Fire Safety Checklist System</h1>
            <p class="subtitle">ระบบตรวจสอบถังดับเพลิงและความปลอดภัย</p>
            <span class="version-badge">Version 17.0 - Ultimate Edition</span>
        </div>

        <!-- Login Form -->
        <div id="loginContainer" class="login-container">
            <h2 style="text-align: center; color: #2c3e50; margin-bottom: 30px; font-size: 1.8rem;">เข้าสู่ระบบ</h2>
            <form id="loginForm">
                <div class="form-group">
                    <label for="username">ชื่อผู้ใช้:</label>
                    <input type="text" id="username" name="username" required placeholder="กรุณาใส่ชื่อผู้ใช้">
                </div>
                <div class="form-group">
                    <label for="password">รหัสผ่าน:</label>
                    <input type="password" id="password" name="password" required placeholder="กรุณาใส่รหัสผ่าน">
                </div>
                <div class="form-group" style="text-align: center;">
                    <button type="submit" class="btn">เข้าสู่ระบบ</button>
                </div>
            </form>
            <div style="text-align: center; margin-top: 20px; color: #7f8c8d; font-size: 0.9rem;">
                <p><strong>ข้อมูลทดสอบ:</strong></p>
                <p>ชื่อผู้ใช้: <code>admin</code> | รหัสผ่าน: <code>admin123</code></p>
            </div>
        </div>

        <!-- Main Content -->
        <div id="mainContent" class="main-content hidden">
            <button id="logoutBtn" class="logout-btn">ออกจากระบบ</button>

            <!-- Navigation Tabs -->
            <div class="nav-tabs">
                <button class="nav-tab active" data-tab="dashboard">📊 Dashboard</button>
                <button class="nav-tab" data-tab="inventory">🧯 คลังถังดับเพลิง</button>
                <button class="nav-tab" data-tab="locations">📍 สถานที่ติดตั้ง</button>
                <button class="nav-tab" data-tab="arview">🔍 AR View</button>
                <button class="nav-tab" data-tab="checklist">📋 Checklist</button>
                <button class="nav-tab" data-tab="analytics">📊 Analytics</button>
                <button class="nav-tab" data-tab="maintenance">🔧 Maintenance</button>
                <button class="nav-tab" data-tab="reports">📈 Reports</button>
                <button class="nav-tab" data-tab="settings">⚙️ Settings</button>
            </div>

            <!-- Inventory Tab -->
            <div id="inventory" class="tab-content">
                <div class="report-section">
                    <div class="report-header">
                        <h3 class="report-title">รายการถังดับเพลิง</h3>
                        <button id="addExtinguisherBtn" class="btn" style="float: right; margin-top: -10px;">➕ เพิ่มถังดับเพลิง</button>
                    </div>
                    
                    <div class="stats-grid" style="margin-bottom: 20px;">
                        <div class="stat-card">
                            <div class="stat-number" id="totalExtinguishers">0</div>
                            <div class="stat-label">ถังดับเพลิงทั้งหมด</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-number" id="activeExtinguishers">0</div>
                            <div class="stat-label">ใช้งานได้</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-number" id="expiredExtinguishers">0</div>
                            <div class="stat-label">หมดอายุ</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-number" id="maintenanceExtinguishers">0</div>
                            <div class="stat-label">ต้องบำรุงรักษา</div>
                        </div>
                    </div>

                    <div id="extinguishersList" class="report-details">
                        <p style="text-align: center; color: #7f8c8d; font-style: italic;">ยังไม่มีข้อมูลถังดับเพลิง กรุณาเพิ่มข้อมูล</p>
                    </div>
                </div>

                <!-- Add Extinguisher Modal -->
                <div id="extinguisherModal" class="modal hidden">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 id="modalTitle">เพิ่มถังดับเพลิงใหม่</h3>
                            <button id="closeModalBtn" class="close-btn">✕</button>
                        </div>
                        <form id="extinguisherForm">
                            <div class="form-group">
                                <label for="extinguisherCode">รหัสถังดับเพลิง:</label>
                                <input type="text" id="extinguisherCode" required placeholder="เช่น FE-001">
                            </div>
                            <div class="form-group">
                                <label for="extinguisherType">ประเภทถังดับเพลิง:</label>
                                <select id="extinguisherType" required>
                                    <option value="">เลือกประเภท</option>
                                    <option value="powder">ผงเคมีแห้ง (Dry Powder)</option>
                                    <option value="co2">คาร์บอนไดออกไซด์ (CO2)</option>
                                    <option value="foam">โฟม (Foam)</option>
                                    <option value="water">น้ำ (Water)</option>
                                    <option value="halon">ฮาลอน (Halon)</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="extinguisherCapacity">ขนาดความจุ (กก.):</label>
                                <select id="extinguisherCapacity" required>
                                    <option value="">เลือกขนาด</option>
                                    <option value="1">1 กก.</option>
                                    <option value="2">2 กก.</option>
                                    <option value="4">4 กก.</option>
                                    <option value="6">6 กก.</option>
                                    <option value="10">10 กก.</option>
                                    <option value="15">15 กก.</option>
                                    <option value="20">20 กก.</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="manufacturingDate">วันที่ผลิต:</label>
                                <input type="date" id="manufacturingDate" required>
                            </div>
                            <div class="form-group">
                                <label for="expiryDate">วันหมดอายุ:</label>
                                <input type="date" id="expiryDate" required>
                            </div>
                            <div class="form-group">
                                <label for="lastMaintenance">การบำรุงรักษาล่าสุด:</label>
                                <input type="date" id="lastMaintenance">
                            </div>
                            <div class="form-group">
                                <label for="extinguisherStatus">สถานะ:</label>
                                <select id="extinguisherStatus" required>
                                    <option value="active">ใช้งานได้</option>
                                    <option value="expired">หมดอายุ</option>
                                    <option value="maintenance">ต้องบำรุงรักษา</option>
                                    <option value="damaged">ชำรุด</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="extinguisherNotes">หมายเหตุ:</label>
                                <textarea id="extinguisherNotes" rows="3" placeholder="หมายเหตุเพิ่มเติม"></textarea>
                            </div>
                            <div class="action-buttons">
                                <button type="submit" class="btn btn-success">💾 บันทึก</button>
                                <button type="button" id="cancelModalBtn" class="btn btn-secondary">❌ ยกเลิก</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Locations Tab -->
            <div id="locations" class="tab-content">
                <div class="report-section">
                    <div class="report-header">
                        <h3 class="report-title">สถานที่ติดตั้งถังดับเพลิง</h3>
                        <button id="addLocationBtn" class="btn" style="float: right; margin-top: -10px;">➕ เพิ่มสถานที่</button>
                    </div>
                    
                    <div class="stats-grid" style="margin-bottom: 20px;">
                        <div class="stat-card">
                            <div class="stat-number" id="totalLocations">0</div>
                            <div class="stat-label">สถานที่ทั้งหมด</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-number" id="occupiedLocations">0</div>
                            <div class="stat-label">มีถังติดตั้ง</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-number" id="emptyLocations">0</div>
                            <div class="stat-label">ว่าง</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-number" id="criticalLocations">0</div>
                            <div class="stat-label">จุดวิกฤต</div>
                        </div>
                    </div>

                    <div id="locationsList" class="report-details">
                        <p style="text-align: center; color: #7f8c8d; font-style: italic;">ยังไม่มีข้อมูลสถานที่ กรุณาเพิ่มข้อมูล</p>
                    </div>
                </div>

                <!-- Add Location Modal -->
                <div id="locationModal" class="modal hidden">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 id="locationModalTitle">เพิ่มสถานที่ใหม่</h3>
                            <button id="closeLocationModalBtn" class="close-btn">✕</button>
                        </div>
                        <form id="locationForm">
                            <div class="form-group">
                                <label for="locationCode">รหัสสถานที่:</label>
                                <input type="text" id="locationCode" required placeholder="เช่น LOC-001">
                            </div>
                            <div class="form-group">
                                <label for="locationName">ชื่อสถานที่:</label>
                                <input type="text" id="locationName" required placeholder="เช่น ห้องประชุมใหญ่">
                            </div>
                            <div class="form-group">
                                <label for="locationFloor">ชั้น:</label>
                                <select id="locationFloor" required>
                                    <option value="">เลือกชั้น</option>
                                    <option value="B1">ชั้นใต้ดิน 1</option>
                                    <option value="G">ชั้นล่าง</option>
                                    <option value="1">ชั้น 1</option>
                                    <option value="2">ชั้น 2</option>
                                    <option value="3">ชั้น 3</option>
                                    <option value="4">ชั้น 4</option>
                                    <option value="5">ชั้น 5</option>
                                    <option value="6">ชั้น 6</option>
                                    <option value="7">ชั้น 7</option>
                                    <option value="8">ชั้น 8</option>
                                    <option value="9">ชั้น 9</option>
                                    <option value="10">ชั้น 10</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="locationZone">โซน/แผนก:</label>
                                <input type="text" id="locationZone" placeholder="เช่น โซน A, แผนกบัญชี">
                            </div>
                            <div class="form-group">
                                <label for="locationRisk">ระดับความเสี่ยง:</label>
                                <select id="locationRisk" required>
                                    <option value="low">ต่ำ</option>
                                    <option value="medium">ปานกลาง</option>
                                    <option value="high">สูง</option>
                                    <option value="critical">วิกฤต</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="assignedExtinguisher">ถังดับเพลิงที่ติดตั้ง:</label>
                                <select id="assignedExtinguisher">
                                    <option value="">ไม่มีถังติดตั้ง</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="locationDescription">รายละเอียดสถานที่:</label>
                                <textarea id="locationDescription" rows="3" placeholder="รายละเอียดเพิ่มเติมเกี่ยวกับสถานที่"></textarea>
                            </div>
                            <div class="action-buttons">
                                <button type="submit" class="btn btn-success">💾 บันทึก</button>
                                <button type="button" id="cancelLocationModalBtn" class="btn btn-secondary">❌ ยกเลิก</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <!-- AR View Tab -->
            <div id="arview" class="tab-content">
                <div class="report-section">
                    <div class="report-header">
                        <h3 class="report-title">🔍 AR View - Checklist มาตรฐานการตรวจสอบถังดับเพลิง</h3>
                        <div class="report-date">มาตรฐาน NFPA 10 & มอก. 332-2537</div>
                    </div>
                    
                    <!-- AR Checklist Progress -->
                    <div class="progress-container">
                        <div class="progress-header">
                            <div class="progress-title">ความคืบหน้าการตรวจสอบ AR</div>
                            <div class="progress-percentage" id="arProgressPercentage">0%</div>
                        </div>
                        <div class="progress-bar">
                            <div class="progress-fill" id="arProgressFill" style="width: 0%"></div>
                        </div>
                        <div class="progress-stats">
                            <span>ปกติ: <span id="arNormalCount">0</span></span>
                            <span>ผิดปกติ: <span id="arAbnormalCount">0</span></span>
                            <span>ยังไม่ตรวจ: <span id="arPendingCount">10</span></span>
                        </div>
                    </div>

                    <!-- AR Checklist Stats -->
                    <div class="stats-grid" style="margin-bottom: 20px;">
                        <div class="stat-card">
                            <div class="stat-number" id="arTotalItems">10</div>
                            <div class="stat-label">รายการทั้งหมด</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-number" id="arCompletedItems">0</div>
                            <div class="stat-label">ตรวจสอบแล้ว</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-number" id="arNormalItems">0</div>
                            <div class="stat-label">สถานะปกติ</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-number" id="arAbnormalItems">0</div>
                            <div class="stat-label">สถานะผิดปกติ</div>
                        </div>
                    </div>

                    <!-- AR Checklist Items -->
                    <div id="arChecklistItems">
                        <!-- AR checklist items will be generated by JavaScript -->
                    </div>

                    <div class="action-buttons">
                        <button id="resetArBtn" class="btn btn-secondary">🔄 รีเซ็ต AR Checklist</button>
                        <button id="saveArBtn" class="btn btn-success">💾 บันทึกผล AR</button>
                        <button id="blockchainSaveBtn" class="btn">🔗 บันทึกลง Blockchain</button>
                    </div>
                </div>
            </div>

            <!-- Dashboard Tab -->
            <div id="dashboard" class="tab-content active">
                <!-- Real-time Status Cards -->
                <div class="stats-grid">
                    <div class="stat-card" style="background: linear-gradient(135deg, #667eea, #764ba2);">
                        <div class="stat-number" id="totalItems">15</div>
                        <div class="stat-label">รายการทั้งหมด</div>
                    </div>
                    <div class="stat-card" style="background: linear-gradient(135deg, #4facfe, #00f2fe);">
                        <div class="stat-number" id="completedItems">0</div>
                        <div class="stat-label">ตรวจสอบแล้ว</div>
                    </div>
                    <div class="stat-card" style="background: linear-gradient(135deg, #43e97b, #38f9d7);">
                        <div class="stat-number" id="normalItems">0</div>
                        <div class="stat-label">สถานะปกติ</div>
                    </div>
                    <div class="stat-card" style="background: linear-gradient(135deg, #f093fb, #f5576c);">
                        <div class="stat-number" id="abnormalItems">0</div>
                        <div class="stat-label">สถานะผิดปกติ</div>
                    </div>
                </div>

                <!-- Quick Actions Panel -->
                <div class="report-section" style="margin-bottom: 30px;">
                    <div class="report-header">
                        <h3 class="report-title">⚡ การดำเนินการด่วน</h3>
                    </div>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                        <button class="btn" onclick="switchTab('checklist')" style="padding: 20px; font-size: 1rem;">
                            📋 เริ่มตรวจสอบ
                        </button>
                        <button class="btn btn-secondary" onclick="switchTab('arview')" style="padding: 20px; font-size: 1rem;">
                            🔍 AR Checklist
                        </button>
                        <button class="btn btn-success" onclick="generateReport()" style="padding: 20px; font-size: 1rem;">
                            📊 สร้างรายงาน
                        </button>
                        <button class="btn btn-danger" onclick="switchTab('maintenance')" style="padding: 20px; font-size: 1rem;">
                            🔧 บำรุงรักษา
                        </button>
                    </div>
                </div>

                <!-- Live Alerts -->
                <div class="report-section" style="margin-bottom: 30px;">
                    <div class="report-header">
                        <h3 class="report-title">🚨 การแจ้งเตือนสด</h3>
                    </div>
                    <div id="liveAlerts">
                        <div class="detail-item">
                            <span class="detail-name">🟢 ระบบทำงานปกติ</span>
                            <span class="detail-status normal">ไม่มีการแจ้งเตือน</span>
                        </div>
                    </div>
                </div>

                <div class="progress-container">
                    <div class="progress-header">
                        <div class="progress-title">ความคืบหน้าการตรวจสอบ</div>
                        <div class="progress-percentage" id="progressPercentage">0%</div>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill" id="progressFill" style="width: 0%"></div>
                    </div>
                    <div class="progress-stats">
                        <span>เริ่มต้น: <span id="startTime">-</span></span>
                        <span>อัปเดตล่าสุด: <span id="lastUpdate">-</span></span>
                    </div>
                </div>

                <div class="report-section">
                    <div class="report-header">
                        <h3 class="report-title">สรุปผลการตรวจสอบล่าสุด</h3>
                        <div class="report-date" id="lastReportDate">ยังไม่มีการตรวจสอบ</div>
                    </div>
                    <div id="dashboardSummary">
                        <p style="text-align: center; color: #7f8c8d; font-style: italic;">กรุณาทำการตรวจสอบเพื่อดูสรุปผล</p>
                    </div>
                </div>
            </div>

            <!-- Checklist Tab -->
            <div id="checklist" class="tab-content">
                <div class="progress-container">
                    <div class="progress-header">
                        <div class="progress-title">ความคืบหน้า</div>
                        <div class="progress-percentage" id="checklistProgress">0%</div>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill" id="checklistProgressFill" style="width: 0%"></div>
                    </div>
                </div>

                <div id="checklistItems">
                    <!-- Checklist items will be generated by JavaScript -->
                </div>

                <div class="action-buttons">
                    <button id="resetBtn" class="btn btn-secondary">🔄 รีเซ็ตทั้งหมด</button>
                    <button id="saveBtn" class="btn btn-success">💾 บันทึกผล</button>
                    <button id="generateReportBtn" class="btn">📊 สร้างรายงาน</button>
                </div>
            </div>

            <!-- Analytics Tab -->
            <div id="analytics" class="tab-content">
                <div class="report-section">
                    <div class="report-header">
                        <h3 class="report-title">📊 การวิเคราะห์ข้อมูลขั้นสูง</h3>
                        <div class="report-date">Real-time Analytics Dashboard</div>
                    </div>
                    
                    <!-- Performance Metrics -->
                    <div class="stats-grid" style="margin-bottom: 30px;">
                        <div class="stat-card" style="background: linear-gradient(135deg, #667eea, #764ba2);">
                            <div class="stat-number" id="complianceRate">0%</div>
                            <div class="stat-label">อัตราการปฏิบัติตาม</div>
                        </div>
                        <div class="stat-card" style="background: linear-gradient(135deg, #f093fb, #f5576c);">
                            <div class="stat-number" id="riskScore">0</div>
                            <div class="stat-label">คะแนนความเสี่ยง</div>
                        </div>
                        <div class="stat-card" style="background: linear-gradient(135deg, #4facfe, #00f2fe);">
                            <div class="stat-number" id="efficiencyScore">0%</div>
                            <div class="stat-label">ประสิทธิภาพ</div>
                        </div>
                        <div class="stat-card" style="background: linear-gradient(135deg, #43e97b, #38f9d7);">
                            <div class="stat-number" id="maintenanceScore">0%</div>
                            <div class="stat-label">การบำรุงรักษา</div>
                        </div>
                    </div>

                    <!-- Charts Section -->
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 30px;">
                        <div class="report-section">
                            <h4 style="color: #2c3e50; margin-bottom: 15px;">📈 แนวโน้มการตรวจสอบ</h4>
                            <div id="trendChart" style="height: 200px; background: linear-gradient(135deg, #f8f9fa, #e9ecef); border-radius: 10px; display: flex; align-items: center; justify-content: center; color: #7f8c8d;">
                                📊 Trend Analysis Chart
                            </div>
                        </div>
                        <div class="report-section">
                            <h4 style="color: #2c3e50; margin-bottom: 15px;">🎯 การกระจายความเสี่ยง</h4>
                            <div id="riskChart" style="height: 200px; background: linear-gradient(135deg, #f8f9fa, #e9ecef); border-radius: 10px; display: flex; align-items: center; justify-content: center; color: #7f8c8d;">
                                🎯 Risk Distribution Chart
                            </div>
                        </div>
                    </div>

                    <!-- Predictive Analytics -->
                    <div class="report-section">
                        <h4 style="color: #2c3e50; margin-bottom: 15px;">🔮 การพยากรณ์และคำแนะนำ</h4>
                        <div id="predictiveAnalytics">
                            <div class="detail-item">
                                <span class="detail-name">🚨 การแจ้งเตือนล่วงหน้า</span>
                                <span class="detail-status pending" id="upcomingAlerts">กำลังวิเคราะห์...</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-name">📅 การบำรุงรักษาที่แนะนำ</span>
                                <span class="detail-status normal" id="maintenanceRecommendations">ไม่มีการแนะนำ</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-name">💡 ข้อเสนอแนะเชิงกลยุทธ์</span>
                                <span class="detail-status normal" id="strategicRecommendations">ระบบทำงานปกติ</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Maintenance Tab -->
            <div id="maintenance" class="tab-content">
                <div class="report-section">
                    <div class="report-header">
                        <h3 class="report-title">🔧 ระบบจัดการการบำรุงรักษา</h3>
                        <button id="scheduleMaintenanceBtn" class="btn" style="float: right; margin-top: -10px;">📅 กำหนดการบำรุงรักษา</button>
                    </div>
                    
                    <!-- Maintenance Calendar -->
                    <div class="stats-grid" style="margin-bottom: 20px;">
                        <div class="stat-card">
                            <div class="stat-number" id="dueMaintenance">0</div>
                            <div class="stat-label">ครบกำหนดบำรุงรักษา</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-number" id="overdueMaintenance">0</div>
                            <div class="stat-label">เกินกำหนด</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-number" id="completedMaintenance">0</div>
                            <div class="stat-label">เสร็จสิ้นแล้ว</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-number" id="scheduledMaintenance">0</div>
                            <div class="stat-label">กำหนดการล่วงหน้า</div>
                        </div>
                    </div>

                    <!-- Maintenance Tasks -->
                    <div class="report-section">
                        <h4 style="color: #2c3e50; margin-bottom: 15px;">📋 รายการงานบำรุงรักษา</h4>
                        <div id="maintenanceTasksList">
                            <p style="text-align: center; color: #7f8c8d; font-style: italic;">ไม่มีงานบำรุงรักษาที่ต้องทำ</p>
                        </div>
                    </div>

                    <!-- Maintenance History -->
                    <div class="report-section">
                        <h4 style="color: #2c3e50; margin-bottom: 15px;">📚 ประวัติการบำรุงรักษา</h4>
                        <div id="maintenanceHistory">
                            <p style="text-align: center; color: #7f8c8d; font-style: italic;">ยังไม่มีประวัติการบำรุงรักษา</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Reports Tab -->
            <div id="reports" class="tab-content">
                <div class="report-section">
                    <div class="report-header">
                        <h3 class="report-title">รายงานการตรวจสอบถังดับเพลิง</h3>
                        <div class="report-date" id="reportDate">วันที่: -</div>
                    </div>
                    
                    <div class="report-summary" id="reportSummary">
                        <div class="summary-item">
                            <div class="summary-number" id="reportTotal">0</div>
                            <div class="summary-label">รายการทั้งหมด</div>
                        </div>
                        <div class="summary-item">
                            <div class="summary-number" id="reportNormal">0</div>
                            <div class="summary-label">สถานะปกติ</div>
                        </div>
                        <div class="summary-item">
                            <div class="summary-number" id="reportAbnormal">0</div>
                            <div class="summary-label">สถานะผิดปกติ</div>
                        </div>
                        <div class="summary-item">
                            <div class="summary-number" id="reportPending">0</div>
                            <div class="summary-label">ยังไม่ตรวจสอบ</div>
                        </div>
                    </div>

                    <div class="report-details" id="reportDetails">
                        <h4 style="color: #2c3e50; margin-bottom: 15px;">รายละเอียดการตรวจสอบ</h4>
                        <div id="reportDetailsList">
                            <p style="text-align: center; color: #7f8c8d; font-style: italic;">ยังไม่มีข้อมูลการตรวจสอบ</p>
                        </div>
                    </div>
                </div>

                <div class="action-buttons">
                    <button id="printReportBtn" class="btn">🖨️ พิมพ์รายงาน</button>
                    <button id="exportReportBtn" class="btn btn-secondary">📄 ส่งออกรายงาน</button>
                </div>
            </div>

            <!-- Settings Tab -->
            <div id="settings" class="tab-content">
                <div class="report-section">
                    <div class="report-header">
                        <h3 class="report-title">การตั้งค่าระบบ</h3>
                    </div>
                    
                    <div class="form-group">
                        <label for="inspectorName">ชื่อผู้ตรวจสอบ:</label>
                        <input type="text" id="inspectorName" placeholder="กรุณาใส่ชื่อผู้ตรวจสอบ">
                    </div>

                    <div class="form-group">
                        <label for="locationName">สถานที่ตรวจสอบ:</label>
                        <input type="text" id="locationName" placeholder="กรุณาใส่ชื่อสถานที่">
                    </div>

                    <div class="form-group">
                        <label for="departmentName">หน่วยงาน/แผนก:</label>
                        <input type="text" id="departmentName" placeholder="กรุณาใส่ชื่อหน่วยงาน">
                    </div>

                    <div class="form-group">
                        <label for="autoSave">บันทึกอัตโนมัติ:</label>
                        <select id="autoSave">
                            <option value="true">เปิดใช้งาน</option>
                            <option value="false">ปิดใช้งาน</option>
                        </select>
                    </div>

                    <div class="action-buttons">
                        <button id="saveSettingsBtn" class="btn btn-success">💾 บันทึกการตั้งค่า</button>
                        <button id="resetSettingsBtn" class="btn btn-secondary">🔄 รีเซ็ตการตั้งค่า</button>
                    </div>
                </div>

                <div class="report-section">
                    <div class="report-header">
                        <h3 class="report-title">ข้อมูลระบบ</h3>
                    </div>
                    <div class="detail-item">
                        <span class="detail-name">เวอร์ชัน:</span>
                        <span class="detail-status normal">17.0 Ultimate</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-name">อัปเดตล่าสุด:</span>
                        <span class="detail-status normal">2024</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-name">สถานะระบบ:</span>
                        <span class="detail-status normal">ทำงานปกติ</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Notification -->
    <div id="notification" class="notification"></div>

    <script>
        // Global variables
        let checklistData = [];
        let arChecklistData = [];
        let extinguishersData = [];
        let locationsData = [];
        let maintenanceData = [];
        let analyticsData = {};
        let currentUser = null;
        let currentEditingExtinguisher = null;
        let currentEditingLocation = null;
        let liveAlertsInterval = null;
        let settings = {
            inspectorName: '',
            locationName: '',
            departmentName: '',
            autoSave: true,
            enableNotifications: true,
            enableAnalytics: true,
            maintenanceInterval: 365 // days
        };

        // Checklist items data
        const checklistItems = [
            {
                id: 1,
                title: "ตรวจสอบความดันในถังดับเพลิง",
                description: "ตรวจสอบเข็มชี้วัดความดันอยู่ในช่วงสีเขียว (Normal Range)"
            },
            {
                id: 2,
                title: "ตรวจสอบสายฉีดและหัวฉีด",
                description: "ตรวจสอบสายฉีดไม่มีรอยแตก หัวฉีดไม่อุดตัน"
            },
            {
                id: 3,
                title: "ตรวจสอบตัวถังดับเพลิง",
                description: "ตรวจสอบตัวถังไม่มีรอยเป็นสนิม รอยบุบ หรือรอยแตก"
            },
            {
                id: 4,
                title: "ตรวจสอบป้ายฉลากและวันหมดอายุ",
                description: "ตรวจสอบป้ายฉลากชัดเจน วันหมดอายุยังไม่หมด"
            },
            {
                id: 5,
                title: "ตรวจสอบขาตั้งและการยึดติด",
                description: "ตรวจสอบขาตั้งแข็งแรง การยึดติดมั่นคง"
            },
            {
                id: 6,
                title: "ตรวจสอบซีลความปลอดภัย",
                description: "ตรวจสอบซีลไม่ขาด ไม่ชำรุด อยู่ในสภาพดี"
            },
            {
                id: 7,
                title: "ตรวจสอบน้ำหนักถังดับเพลิง",
                description: "ตรวจสอบน้ำหนักถังตรงตามที่ระบุในฉลาก"
            },
            {
                id: 8,
                title: "ตรวจสอบตำแหน่งการติดตั้ง",
                description: "ตรวจสอบติดตั้งในตำแหน่งที่เหมาะสม เข้าถึงได้ง่าย"
            },
            {
                id: 9,
                title: "ตรวจสอบป้ายบอกตำแหน่ง",
                description: "ตรวจสอบป้ายบอกตำแหน่งชัดเจน มองเห็นได้ง่าย"
            },
            {
                id: 10,
                title: "ตรวจสอบการบำรุงรักษา",
                description: "ตรวจสอบบันทึกการบำรุงรักษาครบถ้วน"
            },
            {
                id: 11,
                title: "ตรวจสอบสภาพแวดล้อมรอบถัง",
                description: "ตรวจสอบไม่มีสิ่งกีดขวาง พื้นที่โดยรอบสะอาด"
            },
            {
                id: 12,
                title: "ตรวจสอบคู่มือการใช้งาน",
                description: "ตรวจสอบคู่มือการใช้งานติดอยู่และอ่านได้ชัดเจน"
            },
            {
                id: 13,
                title: "ทดสอบการทำงานของวาล์ว",
                description: "ทดสอบวาล์วเปิด-ปิดได้ปกติ ไม่ติดขัด"
            },
            {
                id: 14,
                title: "ตรวจสอบระบบแจ้งเตือน",
                description: "ตรวจสอบระบบแจ้งเตือนทำงานปกติ (ถ้ามี)"
            },
            {
                id: 15,
                title: "บันทึกผลการตรวจสอบ",
                description: "บันทึกผลการตรวจสอบลงในแบบฟอร์มอย่างครบถ้วน"
            }
        ];

        // AR Checklist items data (Standard Fire Extinguisher Inspection)
        const arChecklistItems = [
            {
                id: 1,
                title: "ตรวจสอบตำแหน่งการติดตั้ง",
                description: "ตรวจสอบถังดับเพลิงติดตั้งในตำแหน่งที่กำหนด เข้าถึงได้ง่าย ไม่มีสิ่งกีดขวาง",
                category: "external"
            },
            {
                id: 2,
                title: "ตรวจสอบป้ายบอกตำแหน่ง",
                description: "ตรวจสอบป้ายบอกตำแหน่งชัดเจน มองเห็นได้ง่าย ไม่บิดเบี้ยว",
                category: "external"
            },
            {
                id: 3,
                title: "ตรวจสอบสภาพภายนอกถัง",
                description: "ตรวจสอบตัวถังไม่มีรอยเป็นสนิม รอยบุบ รอยแตก หรือความเสียหายอื่นๆ",
                category: "external"
            },
            {
                id: 4,
                title: "ตรวจสอบหัวฉีดและสายฉีด",
                description: "ตรวจสอบหัวฉีดไม่อุดตัน สายฉีดไม่มีรอยแตก ยืดหยุ่นได้ปกติ",
                category: "external"
            },
            {
                id: 5,
                title: "ตรวจสอบซีลนิรภัย",
                description: "ตรวจสอบซีลนิรภัยไม่ขาด ไม่ชำรุด อยู่ในสภาพดี",
                category: "external"
            },
            {
                id: 6,
                title: "ตรวจสอบเกจวัดความดัน",
                description: "ตรวจสอบเข็มชี้วัดความดันอยู่ในช่วงสีเขียว (Normal Range)",
                category: "technical"
            },
            {
                id: 7,
                title: "ตรวจสอบน้ำหนักถัง",
                description: "ตรวจสอบน้ำหนักถังตรงตามที่ระบุในฉลาก ไม่น้อยกว่าที่กำหนด",
                category: "technical"
            },
            {
                id: 8,
                title: "ตรวจสอบวันที่หมดอายุ",
                description: "ตรวจสอบวันหมดอายุยังไม่หมด ป้ายฉลากชัดเจนอ่านได้",
                category: "technical"
            },
            {
                id: 9,
                title: "ทดสอบการทำงานของวาล์ว",
                description: "ทดสอบวาล์วเปิด-ปิดได้ปกติ ไม่ติดขัด (ไม่ให้กดจริง)",
                category: "technical"
            },
            {
                id: 10,
                title: "ตรวจสอบใบรับรองการตรวจสอบ",
                description: "ตรวจสอบใบรับรองการตรวจสอบประจำปี บันทึกการบำรุงรักษาครบถ้วน",
                category: "technical"
            }
        ];

        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            initializeApp();
            loadSettings();
            setupEventListeners();
        });

        function initializeApp() {
            // Initialize checklist data
            checklistData = checklistItems.map(item => ({
                ...item,
                status: 'pending',
                notes: '',
                timestamp: null
            }));

            // Initialize AR checklist data
            arChecklistData = arChecklistItems.map(item => ({
                ...item,
                status: 'pending',
                notes: '',
                timestamp: null
            }));

            // Load saved data
            loadChecklistData();
            loadArChecklistData();
            loadExtinguishersData();
            loadLocationsData();
            loadMaintenanceData();
            
            // Generate checklist items
            generateChecklistItems();
            generateArChecklistItems();
            
            // Update all displays
            updateDashboard();
            updateArDashboard();
            updateInventoryDisplay();
            updateLocationsDisplay();
            updateAnalytics();
            updateMaintenanceDisplay();
            
            // Start live monitoring
            startLiveMonitoring();
            
            // Initialize sample data if empty
            initializeSampleData();
        }

        function setupEventListeners() {
            // Login form
            document.getElementById('loginForm').addEventListener('submit', handleLogin);
            
            // Logout button
            document.getElementById('logoutBtn').addEventListener('click', handleLogout);
            
            // Navigation tabs
            document.querySelectorAll('.nav-tab').forEach(tab => {
                tab.addEventListener('click', () => switchTab(tab.dataset.tab));
            });
            
            // Action buttons
            document.getElementById('resetBtn').addEventListener('click', resetChecklist);
            document.getElementById('saveBtn').addEventListener('click', saveChecklist);
            document.getElementById('generateReportBtn').addEventListener('click', generateReport);
            document.getElementById('printReportBtn').addEventListener('click', printReport);
            document.getElementById('exportReportBtn').addEventListener('click', exportReport);
            
            // Settings buttons
            document.getElementById('saveSettingsBtn').addEventListener('click', saveSettings);
            document.getElementById('resetSettingsBtn').addEventListener('click', resetSettings);
            
            // AR checklist buttons
            document.getElementById('resetArBtn').addEventListener('click', resetArChecklist);
            document.getElementById('saveArBtn').addEventListener('click', saveArChecklist);
            document.getElementById('blockchainSaveBtn').addEventListener('click', saveToBlockchain);
            
            // Inventory buttons
            document.getElementById('addExtinguisherBtn').addEventListener('click', showExtinguisherModal);
            document.getElementById('closeModalBtn').addEventListener('click', hideExtinguisherModal);
            document.getElementById('cancelModalBtn').addEventListener('click', hideExtinguisherModal);
            document.getElementById('extinguisherForm').addEventListener('submit', saveExtinguisher);
            
            // Location buttons
            document.getElementById('addLocationBtn').addEventListener('click', showLocationModal);
            document.getElementById('closeLocationModalBtn').addEventListener('click', hideLocationModal);
            document.getElementById('cancelLocationModalBtn').addEventListener('click', hideLocationModal);
            document.getElementById('locationForm').addEventListener('submit', saveLocation);
        }

        function handleLogin(e) {
            e.preventDefault();
            
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            
            // Simple authentication (in real app, this would be server-side)
            if (username === 'admin' && password === 'admin123') {
                currentUser = username;
                document.getElementById('loginContainer').classList.add('hidden');
                document.getElementById('mainContent').classList.remove('hidden');
                
                showNotification('เข้าสู่ระบบสำเร็จ!', 'success');
                
                // Set start time if not set
                if (!localStorage.getItem('startTime')) {
                    localStorage.setItem('startTime', new Date().toLocaleString('th-TH'));
                }
                
                updateDashboard();
            } else {
                showNotification('ชื่อผู้ใช้หรือรหัสผ่านไม่ถูกต้อง', 'error');
            }
        }

        function handleLogout() {
            currentUser = null;
            document.getElementById('loginContainer').classList.remove('hidden');
            document.getElementById('mainContent').classList.add('hidden');
            
            // Reset form
            document.getElementById('loginForm').reset();
            
            showNotification('ออกจากระบบเรียบร้อย', 'success');
        }

        function switchTab(tabName) {
            // Update tab buttons
            document.querySelectorAll('.nav-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
            
            // Update tab content
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
            });
            document.getElementById(tabName).classList.add('active');
            
            // Update specific tab content
            if (tabName === 'reports') {
                updateReportsTab();
            }
        }

        function generateChecklistItems() {
            const container = document.getElementById('checklistItems');
            container.innerHTML = '';
            
            checklistData.forEach((item, index) => {
                const itemElement = document.createElement('div');
                itemElement.className = `checklist-item ${item.status === 'normal' ? 'completed' : item.status === 'abnormal' ? 'failed' : ''}`;
                
                itemElement.innerHTML = `
                    <div class="item-header">
                        <div class="item-title">${item.title}</div>
                        <div class="item-number">${item.id}</div>
                    </div>
                    <div class="item-description">${item.description}</div>
                    <div class="item-controls">
                        <div class="status-buttons">
                            <button class="status-btn normal ${item.status === 'normal' ? 'active' : ''}" 
                                    onclick="updateItemStatus(${index}, 'normal')">
                                ✅ ปกติ
                            </button>
                            <button class="status-btn abnormal ${item.status === 'abnormal' ? 'active' : ''}" 
                                    onclick="updateItemStatus(${index}, 'abnormal')">
                                ❌ ผิดปกติ
                            </button>
                        </div>
                        <input type="text" class="notes-input" placeholder="หมายเหตุ (ถ้ามี)" 
                               value="${item.notes}" 
                               onchange="updateItemNotes(${index}, this.value)">
                    </div>
                `;
                
                container.appendChild(itemElement);
            });
        }

        function updateItemStatus(index, status) {
            checklistData[index].status = status;
            checklistData[index].timestamp = new Date().toLocaleString('th-TH');
            
            // Auto-save if enabled
            if (settings.autoSave) {
                saveChecklistData();
            }
            
            // Regenerate items to update UI
            generateChecklistItems();
            
            // Update progress and dashboard
            updateProgress();
            updateDashboard();
            
            showNotification(`อัปเดตรายการที่ ${index + 1} เรียบร้อย`, 'success');
        }

        function updateItemNotes(index, notes) {
            checklistData[index].notes = notes;
            
            // Auto-save if enabled
            if (settings.autoSave) {
                saveChecklistData();
            }
        }

        function updateProgress() {
            const completed = checklistData.filter(item => item.status !== 'pending').length;
            const total = checklistData.length;
            const percentage = Math.round((completed / total) * 100);
            
            // Update checklist progress
            document.getElementById('checklistProgress').textContent = `${percentage}%`;
            document.getElementById('checklistProgressFill').style.width = `${percentage}%`;
            
            // Update dashboard progress
            document.getElementById('progressPercentage').textContent = `${percentage}%`;
            document.getElementById('progressFill').style.width = `${percentage}%`;
        }

        function updateDashboard() {
            const total = checklistData.length;
            const completed = checklistData.filter(item => item.status !== 'pending').length;
            const normal = checklistData.filter(item => item.status === 'normal').length;
            const abnormal = checklistData.filter(item => item.status === 'abnormal').length;
            
            // Update stats
            document.getElementById('totalItems').textContent = total;
            document.getElementById('completedItems').textContent = completed;
            document.getElementById('normalItems').textContent = normal;
            document.getElementById('abnormalItems').textContent = abnormal;
            
            // Update progress
            updateProgress();
            
            // Update timestamps
            const startTime = localStorage.getItem('startTime') || '-';
            const lastUpdate = localStorage.getItem('lastUpdate') || '-';
            
            document.getElementById('startTime').textContent = startTime;
            document.getElementById('lastUpdate').textContent = lastUpdate;
            
            // Update dashboard summary
            updateDashboardSummary();
        }

        function updateDashboardSummary() {
            const summaryContainer = document.getElementById('dashboardSummary');
            const completed = checklistData.filter(item => item.status !== 'pending').length;
            
            if (completed === 0) {
                summaryContainer.innerHTML = '<p style="text-align: center; color: #7f8c8d; font-style: italic;">กรุณาทำการตรวจสอบเพื่อดูสรุปผล</p>';
                document.getElementById('lastReportDate').textContent = 'ยังไม่มีการตรวจสอบ';
                return;
            }
            
            const normal = checklistData.filter(item => item.status === 'normal').length;
            const abnormal = checklistData.filter(item => item.status === 'abnormal').length;
            const percentage = Math.round((completed / checklistData.length) * 100);
            
            let statusClass = 'normal';
            let statusText = 'ดี';
            
            if (abnormal > 0) {
                statusClass = 'abnormal';
                statusText = 'ต้องปรับปรุง';
            } else if (completed === checklistData.length) {
                statusClass = 'normal';
                statusText = 'ดีเยี่ยม';
            }
            
            summaryContainer.innerHTML = `
                <div class="report-summary">
                    <div class="summary-item">
                        <div class="summary-number">${percentage}%</div>
                        <div class="summary-label">ความคืบหน้า</div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-number">${normal}</div>
                        <div class="summary-label">ปกติ</div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-number">${abnormal}</div>
                        <div class="summary-label">ผิดปกติ</div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-number detail-status ${statusClass}">${statusText}</div>
                        <div class="summary-label">สถานะรวม</div>
                    </div>
                </div>
            `;
            
            document.getElementById('lastReportDate').textContent = `อัปเดตล่าสุด: ${new Date().toLocaleString('th-TH')}`;
        }

        function resetChecklist() {
            if (confirm('คุณต้องการรีเซ็ตข้อมูลทั้งหมดหรือไม่?')) {
                checklistData.forEach(item => {
                    item.status = 'pending';
                    item.notes = '';
                    item.timestamp = null;
                });
                
                saveChecklistData();
                generateChecklistItems();
                updateDashboard();
                
                showNotification('รีเซ็ตข้อมูลเรียบร้อย', 'success');
            }
        }

        function saveChecklist() {
            localStorage.setItem('lastUpdate', new Date().toLocaleString('th-TH'));
            saveChecklistData();
            updateDashboard();
            showNotification('บันทึกข้อมูลเรียบร้อย', 'success');
        }

        function generateReport() {
            updateReportsTab();
            switchTab('reports');
            showNotification('สร้างรายงานเรียบร้อย', 'success');
        }

        function updateReportsTab() {
            const total = checklistData.length;
            const normal = checklistData.filter(item => item.status === 'normal').length;
            const abnormal = checklistData.filter(item => item.status === 'abnormal').length;
            const pending = checklistData.filter(item => item.status === 'pending').length;
            
            // Update report summary
            document.getElementById('reportTotal').textContent = total;
            document.getElementById('reportNormal').textContent = normal;
            document.getElementById('reportAbnormal').textContent = abnormal;
            document.getElementById('reportPending').textContent = pending;
            document.getElementById('reportDate').textContent = `วันที่: ${new Date().toLocaleDateString('th-TH')}`;
            
            // Update report details
            const detailsList = document.getElementById('reportDetailsList');
            
            if (checklistData.every(item => item.status === 'pending')) {
                detailsList.innerHTML = '<p style="text-align: center; color: #7f8c8d; font-style: italic;">ยังไม่มีข้อมูลการตรวจสอบ</p>';
                return;
            }
            
            detailsList.innerHTML = '';
            
            checklistData.forEach(item => {
                if (item.status !== 'pending') {
                    const detailItem = document.createElement('div');
                    detailItem.className = 'detail-item';
                    
                    let statusText = '';
                    let statusClass = '';
                    
                    switch (item.status) {
                        case 'normal':
                            statusText = 'ปกติ';
                            statusClass = 'normal';
                            break;
                        case 'abnormal':
                            statusText = 'ผิดปกติ';
                            statusClass = 'abnormal';
                            break;
                        default:
                            statusText = 'ยังไม่ตรวจสอบ';
                            statusClass = 'pending';
                    }
                    
                    detailItem.innerHTML = `
                        <div>
                            <div class="detail-name">${item.title}</div>
                            ${item.notes ? `<div style="font-size: 0.9rem; color: #7f8c8d; margin-top: 5px;">หมายเหตุ: ${item.notes}</div>` : ''}
                            ${item.timestamp ? `<div style="font-size: 0.8rem; color: #95a5a6; margin-top: 3px;">เวลา: ${item.timestamp}</div>` : ''}
                        </div>
                        <div class="detail-status ${statusClass}">${statusText}</div>
                    `;
                    
                    detailsList.appendChild(detailItem);
                }
            });
        }

        function printReport() {
            const printContent = document.getElementById('reports').innerHTML;
            const printWindow = window.open('', '_blank');
            
            printWindow.document.write(`
                <!DOCTYPE html>
                <html>
                <head>
                    <title>รายงานการตรวจสอบถังดับเพลิง</title>
                    <style>
                        body { font-family: 'Sarabun', sans-serif; margin: 20px; }
                        .report-section { margin-bottom: 30px; }
                        .report-header { border-bottom: 2px solid #333; padding-bottom: 10px; margin-bottom: 20px; }
                        .report-title { font-size: 1.5rem; font-weight: bold; margin: 0; }
                        .report-summary { display: grid; grid-template-columns: repeat(4, 1fr); gap: 15px; margin: 20px 0; }
                        .summary-item { text-align: center; padding: 15px; border: 1px solid #ddd; }
                        .summary-number { font-size: 1.5rem; font-weight: bold; }
                        .detail-item { display: flex; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid #eee; }
                        .detail-status { padding: 5px 10px; border-radius: 5px; font-size: 0.9rem; }
                        .detail-status.normal { background: #d4edda; color: #155724; }
                        .detail-status.abnormal { background: #f8d7da; color: #721c24; }
                        .detail-status.pending { background: #fff3cd; color: #856404; }
                        @media print { .action-buttons { display: none; } }
                    </style>
                </head>
                <body>
                    <h1 style="text-align: center; color: #2c3e50;">รายงานการตรวจสอบถังดับเพลิง</h1>
                    <p style="text-align: center; color: #7f8c8d;">ผู้ตรวจสอบ: ${settings.inspectorName || 'ไม่ระบุ'} | สถานที่: ${settings.locationName || 'ไม่ระบุ'}</p>
                    ${printContent}
                </body>
                </html>
            `);
            
            printWindow.document.close();
            printWindow.print();
        }

        function exportReport() {
            const reportData = {
                date: new Date().toLocaleDateString('th-TH'),
                inspector: settings.inspectorName || 'ไม่ระบุ',
                location: settings.locationName || 'ไม่ระบุ',
                department: settings.departmentName || 'ไม่ระบุ',
                summary: {
                    total: checklistData.length,
                    normal: checklistData.filter(item => item.status === 'normal').length,
                    abnormal: checklistData.filter(item => item.status === 'abnormal').length,
                    pending: checklistData.filter(item => item.status === 'pending').length
                },
                details: checklistData.map(item => ({
                    id: item.id,
                    title: item.title,
                    status: item.status,
                    notes: item.notes,
                    timestamp: item.timestamp
                }))
            };
            
            const dataStr = JSON.stringify(reportData, null, 2);
            const dataBlob = new Blob([dataStr], {type: 'application/json'});
            
            const link = document.createElement('a');
            link.href = URL.createObjectURL(dataBlob);
            link.download = `fire-safety-report-${new Date().toISOString().split('T')[0]}.json`;
            link.click();
            
            showNotification('ส่งออกรายงานเรียบร้อย', 'success');
        }

        function loadSettings() {
            const savedSettings = localStorage.getItem('fireSystemSettings');
            if (savedSettings) {
                settings = { ...settings, ...JSON.parse(savedSettings) };
                
                // Update form fields
                document.getElementById('inspectorName').value = settings.inspectorName;
                document.getElementById('locationName').value = settings.locationName;
                document.getElementById('departmentName').value = settings.departmentName;
                document.getElementById('autoSave').value = settings.autoSave.toString();
            }
        }

        function saveSettings() {
            settings.inspectorName = document.getElementById('inspectorName').value;
            settings.locationName = document.getElementById('locationName').value;
            settings.departmentName = document.getElementById('departmentName').value;
            settings.autoSave = document.getElementById('autoSave').value === 'true';
            
            localStorage.setItem('fireSystemSettings', JSON.stringify(settings));
            showNotification('บันทึกการตั้งค่าเรียบร้อย', 'success');
        }

        function resetSettings() {
            if (confirm('คุณต้องการรีเซ็ตการตั้งค่าทั้งหมดหรือไม่?')) {
                settings = {
                    inspectorName: '',
                    locationName: '',
                    departmentName: '',
                    autoSave: true
                };
                
                localStorage.removeItem('fireSystemSettings');
                loadSettings();
                showNotification('รีเซ็ตการตั้งค่าเรียบร้อย', 'success');
            }
        }

        // Extinguisher Management Functions
        function showExtinguisherModal(extinguisher = null) {
            currentEditingExtinguisher = extinguisher;
            const modal = document.getElementById('extinguisherModal');
            const form = document.getElementById('extinguisherForm');
            
            if (extinguisher) {
                document.getElementById('modalTitle').textContent = 'แก้ไขข้อมูลถังดับเพลิง';
                document.getElementById('extinguisherCode').value = extinguisher.code;
                document.getElementById('extinguisherType').value = extinguisher.type;
                document.getElementById('extinguisherCapacity').value = extinguisher.capacity;
                document.getElementById('manufacturingDate').value = extinguisher.manufacturingDate;
                document.getElementById('expiryDate').value = extinguisher.expiryDate;
                document.getElementById('lastMaintenance').value = extinguisher.lastMaintenance || '';
                document.getElementById('extinguisherStatus').value = extinguisher.status;
                document.getElementById('extinguisherNotes').value = extinguisher.notes || '';
            } else {
                document.getElementById('modalTitle').textContent = 'เพิ่มถังดับเพลิงใหม่';
                form.reset();
            }
            
            modal.classList.add('show');
        }

        function hideExtinguisherModal() {
            const modal = document.getElementById('extinguisherModal');
            modal.classList.remove('show');
            currentEditingExtinguisher = null;
        }

        function saveExtinguisher(e) {
            e.preventDefault();
            
            const formData = {
                code: document.getElementById('extinguisherCode').value,
                type: document.getElementById('extinguisherType').value,
                capacity: document.getElementById('extinguisherCapacity').value,
                manufacturingDate: document.getElementById('manufacturingDate').value,
                expiryDate: document.getElementById('expiryDate').value,
                lastMaintenance: document.getElementById('lastMaintenance').value,
                status: document.getElementById('extinguisherStatus').value,
                notes: document.getElementById('extinguisherNotes').value,
                createdAt: new Date().toISOString()
            };
            
            if (currentEditingExtinguisher) {
                // Update existing extinguisher
                const index = extinguishersData.findIndex(ext => ext.id === currentEditingExtinguisher.id);
                extinguishersData[index] = { ...currentEditingExtinguisher, ...formData };
                showNotification('อัปเดตข้อมูลถังดับเพลิงเรียบร้อย', 'success');
            } else {
                // Add new extinguisher
                const newExtinguisher = {
                    id: Date.now(),
                    ...formData
                };
                extinguishersData.push(newExtinguisher);
                showNotification('เพิ่มถังดับเพลิงใหม่เรียบร้อย', 'success');
            }
            
            saveExtinguishersData();
            updateInventoryDisplay();
            updateLocationExtinguisherOptions();
            hideExtinguisherModal();
        }

        function deleteExtinguisher(id) {
            if (confirm('คุณต้องการลบถังดับเพลิงนี้หรือไม่?')) {
                extinguishersData = extinguishersData.filter(ext => ext.id !== id);
                saveExtinguishersData();
                updateInventoryDisplay();
                updateLocationExtinguisherOptions();
                showNotification('ลบถังดับเพลิงเรียบร้อย', 'success');
            }
        }

        function updateInventoryDisplay() {
            const container = document.getElementById('extinguishersList');
            
            if (extinguishersData.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: #7f8c8d; font-style: italic;">ยังไม่มีข้อมูลถังดับเพลิง กรุณาเพิ่มข้อมูล</p>';
            } else {
                container.innerHTML = '';
                
                extinguishersData.forEach(extinguisher => {
                    const item = document.createElement('div');
                    item.className = 'extinguisher-item';
                    
                    const typeNames = {
                        powder: 'ผงเคมีแห้ง',
                        co2: 'คาร์บอนไดออกไซด์',
                        foam: 'โฟม',
                        water: 'น้ำ',
                        halon: 'ฮาลอน'
                    };
                    
                    const statusNames = {
                        active: 'ใช้งานได้',
                        expired: 'หมดอายุ',
                        maintenance: 'ต้องบำรุงรักษา',
                        damaged: 'ชำรุด'
                    };
                    
                    item.innerHTML = `
                        <div class="item-info">
                            <div>
                                <div class="info-label">รหัสถัง:</div>
                                <div class="info-value">${extinguisher.code}</div>
                            </div>
                            <div>
                                <div class="info-label">ประเภท:</div>
                                <div class="info-value">${typeNames[extinguisher.type]}</div>
                            </div>
                            <div>
                                <div class="info-label">ขนาด:</div>
                                <div class="info-value">${extinguisher.capacity} กก.</div>
                            </div>
                            <div>
                                <div class="info-label">สถานะ:</div>
                                <div class="info-value">
                                    <span class="status-badge ${extinguisher.status}">${statusNames[extinguisher.status]}</span>
                                </div>
                            </div>
                            <div>
                                <div class="info-label">วันหมดอายุ:</div>
                                <div class="info-value">${new Date(extinguisher.expiryDate).toLocaleDateString('th-TH')}</div>
                            </div>
                            <div>
                                <div class="info-label">บำรุงรักษาล่าสุด:</div>
                                <div class="info-value">${extinguisher.lastMaintenance ? new Date(extinguisher.lastMaintenance).toLocaleDateString('th-TH') : 'ไม่มีข้อมูล'}</div>
                            </div>
                        </div>
                        ${extinguisher.notes ? `<div style="margin-bottom: 15px;"><strong>หมายเหตุ:</strong> ${extinguisher.notes}</div>` : ''}
                        <div class="item-actions">
                            <button class="btn btn-secondary btn-small" onclick="showExtinguisherModal(${JSON.stringify(extinguisher).replace(/"/g, '&quot;')})">✏️ แก้ไข</button>
                            <button class="btn btn-danger btn-small" onclick="deleteExtinguisher(${extinguisher.id})">🗑️ ลบ</button>
                        </div>
                    `;
                    
                    container.appendChild(item);
                });
            }
            
            // Update stats
            const total = extinguishersData.length;
            const active = extinguishersData.filter(ext => ext.status === 'active').length;
            const expired = extinguishersData.filter(ext => ext.status === 'expired').length;
            const maintenance = extinguishersData.filter(ext => ext.status === 'maintenance').length;
            
            document.getElementById('totalExtinguishers').textContent = total;
            document.getElementById('activeExtinguishers').textContent = active;
            document.getElementById('expiredExtinguishers').textContent = expired;
            document.getElementById('maintenanceExtinguishers').textContent = maintenance;
        }

        // Location Management Functions
        function showLocationModal(location = null) {
            currentEditingLocation = location;
            const modal = document.getElementById('locationModal');
            const form = document.getElementById('locationForm');
            
            // Update extinguisher options
            updateLocationExtinguisherOptions();
            
            if (location) {
                document.getElementById('locationModalTitle').textContent = 'แก้ไขข้อมูลสถานที่';
                document.getElementById('locationCode').value = location.code;
                document.getElementById('locationName').value = location.name;
                document.getElementById('locationFloor').value = location.floor;
                document.getElementById('locationZone').value = location.zone || '';
                document.getElementById('locationRisk').value = location.risk;
                document.getElementById('assignedExtinguisher').value = location.assignedExtinguisher || '';
                document.getElementById('locationDescription').value = location.description || '';
            } else {
                document.getElementById('locationModalTitle').textContent = 'เพิ่มสถานที่ใหม่';
                form.reset();
                updateLocationExtinguisherOptions();
            }
            
            modal.classList.add('show');
        }

        function hideLocationModal() {
            const modal = document.getElementById('locationModal');
            modal.classList.remove('show');
            currentEditingLocation = null;
        }

        function updateLocationExtinguisherOptions() {
            const select = document.getElementById('assignedExtinguisher');
            const currentValue = select.value;
            
            select.innerHTML = '<option value="">ไม่มีถังติดตั้ง</option>';
            
            // Add available extinguishers
            const availableExtinguishers = extinguishersData.filter(ext => {
                // Include active extinguishers that are not assigned to other locations
                if (ext.status !== 'active') return false;
                
                const assignedLocation = locationsData.find(loc => loc.assignedExtinguisher === ext.id.toString());
                if (assignedLocation && (!currentEditingLocation || assignedLocation.id !== currentEditingLocation.id)) {
                    return false;
                }
                
                return true;
            });
            
            availableExtinguishers.forEach(ext => {
                const option = document.createElement('option');
                option.value = ext.id;
                option.textContent = `${ext.code} - ${ext.type} (${ext.capacity} กก.)`;
                select.appendChild(option);
            });
            
            // Restore previous value if still valid
            if (currentValue && [...select.options].some(opt => opt.value === currentValue)) {
                select.value = currentValue;
            }
        }

        function saveLocation(e) {
            e.preventDefault();
            
            const formData = {
                code: document.getElementById('locationCode').value,
                name: document.getElementById('locationName').value,
                floor: document.getElementById('locationFloor').value,
                zone: document.getElementById('locationZone').value,
                risk: document.getElementById('locationRisk').value,
                assignedExtinguisher: document.getElementById('assignedExtinguisher').value,
                description: document.getElementById('locationDescription').value,
                createdAt: new Date().toISOString()
            };
            
            if (currentEditingLocation) {
                // Update existing location
                const index = locationsData.findIndex(loc => loc.id === currentEditingLocation.id);
                locationsData[index] = { ...currentEditingLocation, ...formData };
                showNotification('อัปเดตข้อมูลสถานที่เรียบร้อย', 'success');
            } else {
                // Add new location
                const newLocation = {
                    id: Date.now(),
                    ...formData
                };
                locationsData.push(newLocation);
                showNotification('เพิ่มสถานที่ใหม่เรียบร้อย', 'success');
            }
            
            saveLocationsData();
            updateLocationsDisplay();
            hideLocationModal();
        }

        function deleteLocation(id) {
            if (confirm('คุณต้องการลบสถานที่นี้หรือไม่?')) {
                locationsData = locationsData.filter(loc => loc.id !== id);
                saveLocationsData();
                updateLocationsDisplay();
                showNotification('ลบสถานที่เรียบร้อย', 'success');
            }
        }

        function updateLocationsDisplay() {
            const container = document.getElementById('locationsList');
            
            if (locationsData.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: #7f8c8d; font-style: italic;">ยังไม่มีข้อมูลสถานที่ กรุณาเพิ่มข้อมูล</p>';
            } else {
                container.innerHTML = '';
                
                locationsData.forEach(location => {
                    const item = document.createElement('div');
                    item.className = 'location-item';
                    
                    const riskNames = {
                        low: 'ต่ำ',
                        medium: 'ปานกลาง',
                        high: 'สูง',
                        critical: 'วิกฤต'
                    };
                    
                    const assignedExtinguisher = location.assignedExtinguisher ? 
                        extinguishersData.find(ext => ext.id.toString() === location.assignedExtinguisher) : null;
                    
                    item.innerHTML = `
                        <div class="item-info">
                            <div>
                                <div class="info-label">รหัสสถานที่:</div>
                                <div class="info-value">${location.code}</div>
                            </div>
                            <div>
                                <div class="info-label">ชื่อสถานที่:</div>
                                <div class="info-value">${location.name}</div>
                            </div>
                            <div>
                                <div class="info-label">ชั้น:</div>
                                <div class="info-value">${location.floor}</div>
                            </div>
                            <div>
                                <div class="info-label">โซน/แผนก:</div>
                                <div class="info-value">${location.zone || 'ไม่ระบุ'}</div>
                            </div>
                            <div>
                                <div class="info-label">ระดับความเสี่ยง:</div>
                                <div class="info-value">
                                    <span class="status-badge ${location.risk}">${riskNames[location.risk]}</span>
                                </div>
                            </div>
                            <div>
                                <div class="info-label">ถังดับเพลิง:</div>
                                <div class="info-value">${assignedExtinguisher ? `${assignedExtinguisher.code} (${assignedExtinguisher.type})` : 'ไม่มีถังติดตั้ง'}</div>
                            </div>
                        </div>
                        ${location.description ? `<div style="margin-bottom: 15px;"><strong>รายละเอียด:</strong> ${location.description}</div>` : ''}
                        <div class="item-actions">
                            <button class="btn btn-secondary btn-small" onclick="showLocationModal(${JSON.stringify(location).replace(/"/g, '&quot;')})">✏️ แก้ไข</button>
                            <button class="btn btn-danger btn-small" onclick="deleteLocation(${location.id})">🗑️ ลบ</button>
                        </div>
                    `;
                    
                    container.appendChild(item);
                });
            }
            
            // Update stats
            const total = locationsData.length;
            const occupied = locationsData.filter(loc => loc.assignedExtinguisher).length;
            const empty = total - occupied;
            const critical = locationsData.filter(loc => loc.risk === 'critical').length;
            
            document.getElementById('totalLocations').textContent = total;
            document.getElementById('occupiedLocations').textContent = occupied;
            document.getElementById('emptyLocations').textContent = empty;
            document.getElementById('criticalLocations').textContent = critical;
        }

        function saveChecklistData() {
            localStorage.setItem('fireChecklistData', JSON.stringify(checklistData));
        }

        function saveExtinguishersData() {
            localStorage.setItem('fireExtinguishersData', JSON.stringify(extinguishersData));
        }

        function saveLocationsData() {
            localStorage.setItem('fireLocationsData', JSON.stringify(locationsData));
        }

        function loadChecklistData() {
            const savedData = localStorage.getItem('fireChecklistData');
            if (savedData) {
                const parsed = JSON.parse(savedData);
                // Merge with default data to handle new items
                checklistData = checklistItems.map(defaultItem => {
                    const savedItem = parsed.find(item => item.id === defaultItem.id);
                    return savedItem ? { ...defaultItem, ...savedItem } : { ...defaultItem, status: 'pending', notes: '', timestamp: null };
                });
            }
        }

        function loadExtinguishersData() {
            const savedData = localStorage.getItem('fireExtinguishersData');
            if (savedData) {
                extinguishersData = JSON.parse(savedData);
            }
        }

        function loadLocationsData() {
            const savedData = localStorage.getItem('fireLocationsData');
            if (savedData) {
                locationsData = JSON.parse(savedData);
            }
        }

        // AR Checklist Functions
        function generateArChecklistItems() {
            const container = document.getElementById('arChecklistItems');
            container.innerHTML = '';
            
            // Group items by category
            const externalItems = arChecklistData.filter(item => item.category === 'external');
            const technicalItems = arChecklistData.filter(item => item.category === 'technical');
            
            // Create external inspection section
            const externalSection = document.createElement('div');
            externalSection.className = 'report-section';
            externalSection.innerHTML = `
                <div class="report-header">
                    <h4 class="report-title">🔍 การตรวจสอบภายนอก (External Inspection)</h4>
                </div>
            `;
            
            externalItems.forEach((item, index) => {
                const itemElement = createArChecklistItem(item, arChecklistData.indexOf(item));
                externalSection.appendChild(itemElement);
            });
            
            // Create technical inspection section
            const technicalSection = document.createElement('div');
            technicalSection.className = 'report-section';
            technicalSection.innerHTML = `
                <div class="report-header">
                    <h4 class="report-title">⚙️ การตรวจสอบเทคนิค (Technical Inspection)</h4>
                </div>
            `;
            
            technicalItems.forEach((item, index) => {
                const itemElement = createArChecklistItem(item, arChecklistData.indexOf(item));
                technicalSection.appendChild(itemElement);
            });
            
            container.appendChild(externalSection);
            container.appendChild(technicalSection);
        }

        function createArChecklistItem(item, index) {
            const itemElement = document.createElement('div');
            itemElement.className = `checklist-item ${item.status === 'normal' ? 'completed' : item.status === 'abnormal' ? 'failed' : ''}`;
            
            itemElement.innerHTML = `
                <div class="item-header">
                    <div class="item-title">${item.title}</div>
                    <div class="item-number">${item.id}</div>
                </div>
                <div class="item-description">${item.description}</div>
                <div class="item-controls">
                    <div class="status-buttons">
                        <button class="status-btn normal ${item.status === 'normal' ? 'active' : ''}" 
                                onclick="updateArItemStatus(${index}, 'normal')">
                            ✅ ปกติ
                        </button>
                        <button class="status-btn abnormal ${item.status === 'abnormal' ? 'active' : ''}" 
                                onclick="updateArItemStatus(${index}, 'abnormal')">
                            ❌ ผิดปกติ
                        </button>
                    </div>
                    <input type="text" class="notes-input" placeholder="${item.status === 'abnormal' ? 'ระบุสาเหตุที่ผิดปกติ (จำเป็น)' : 'หมายเหตุ (ถ้ามี)'}" 
                           value="${item.notes}" 
                           onchange="updateArItemNotes(${index}, this.value)"
                           ${item.status === 'abnormal' ? 'required' : ''}>
                </div>
            `;
            
            return itemElement;
        }

        function updateArItemStatus(index, status) {
            arChecklistData[index].status = status;
            arChecklistData[index].timestamp = new Date().toLocaleString('th-TH');
            
            // Clear notes if changing from abnormal to normal
            if (status === 'normal' && arChecklistData[index].notes) {
                arChecklistData[index].notes = '';
            }
            
            // Auto-save if enabled
            if (settings.autoSave) {
                saveArChecklistData();
            }
            
            // Regenerate items to update UI
            generateArChecklistItems();
            
            // Update progress and dashboard
            updateArProgress();
            updateArDashboard();
            
            showNotification(`อัปเดต AR รายการที่ ${index + 1} เรียบร้อย`, 'success');
        }

        function updateArItemNotes(index, notes) {
            arChecklistData[index].notes = notes;
            
            // Auto-save if enabled
            if (settings.autoSave) {
                saveArChecklistData();
            }
        }

        function updateArProgress() {
            const completed = arChecklistData.filter(item => item.status !== 'pending').length;
            const total = arChecklistData.length;
            const percentage = Math.round((completed / total) * 100);
            
            // Update AR progress
            document.getElementById('arProgressPercentage').textContent = `${percentage}%`;
            document.getElementById('arProgressFill').style.width = `${percentage}%`;
            
            // Update progress bar color based on abnormal items
            const abnormal = arChecklistData.filter(item => item.status === 'abnormal').length;
            const progressFill = document.getElementById('arProgressFill');
            
            if (abnormal > 0) {
                progressFill.style.background = 'linear-gradient(90deg, #e74c3c, #c0392b)';
            } else if (completed === total) {
                progressFill.style.background = 'linear-gradient(90deg, #27ae60, #2ecc71)';
            } else {
                progressFill.style.background = 'linear-gradient(90deg, #667eea, #764ba2)';
            }
        }

        function updateArDashboard() {
            const total = arChecklistData.length;
            const completed = arChecklistData.filter(item => item.status !== 'pending').length;
            const normal = arChecklistData.filter(item => item.status === 'normal').length;
            const abnormal = arChecklistData.filter(item => item.status === 'abnormal').length;
            const pending = total - completed;
            
            // Update AR stats
            document.getElementById('arTotalItems').textContent = total;
            document.getElementById('arCompletedItems').textContent = completed;
            document.getElementById('arNormalItems').textContent = normal;
            document.getElementById('arAbnormalItems').textContent = abnormal;
            
            // Update progress stats
            document.getElementById('arNormalCount').textContent = normal;
            document.getElementById('arAbnormalCount').textContent = abnormal;
            document.getElementById('arPendingCount').textContent = pending;
            
            // Update progress
            updateArProgress();
        }

        function resetArChecklist() {
            if (confirm('คุณต้องการรีเซ็ต AR Checklist ทั้งหมดหรือไม่?')) {
                arChecklistData.forEach(item => {
                    item.status = 'pending';
                    item.notes = '';
                    item.timestamp = null;
                });
                
                saveArChecklistData();
                generateArChecklistItems();
                updateArDashboard();
                
                showNotification('รีเซ็ต AR Checklist เรียบร้อย', 'success');
            }
        }

        function saveArChecklist() {
            // Check if abnormal items have notes
            const abnormalWithoutNotes = arChecklistData.filter(item => 
                item.status === 'abnormal' && (!item.notes || item.notes.trim() === '')
            );
            
            if (abnormalWithoutNotes.length > 0) {
                showNotification('กรุณาระบุสาเหตุสำหรับรายการที่ผิดปกติ', 'error');
                return;
            }
            
            localStorage.setItem('lastArUpdate', new Date().toLocaleString('th-TH'));
            saveArChecklistData();
            updateArDashboard();
            showNotification('บันทึก AR Checklist เรียบร้อย', 'success');
        }

        function saveToBlockchain() {
            const completed = arChecklistData.filter(item => item.status !== 'pending').length;
            
            if (completed === 0) {
                showNotification('กรุณาทำการตรวจสอบก่อนบันทึกลง Blockchain', 'error');
                return;
            }
            
            // Simulate blockchain save
            const blockchainData = {
                timestamp: new Date().toISOString(),
                inspector: settings.inspectorName || 'ไม่ระบุ',
                location: settings.locationName || 'ไม่ระบุ',
                checklistData: arChecklistData.filter(item => item.status !== 'pending'),
                hash: generateSimpleHash(JSON.stringify(arChecklistData))
            };
            
            // Simulate network delay
            showNotification('กำลังบันทึกลง Blockchain...', 'success');
            
            setTimeout(() => {
                localStorage.setItem('blockchainRecord', JSON.stringify(blockchainData));
                showNotification(`บันทึกลง Blockchain เรียบร้อย! Hash: ${blockchainData.hash.substring(0, 8)}...`, 'success');
            }, 2000);
        }

        function generateSimpleHash(data) {
            let hash = 0;
            for (let i = 0; i < data.length; i++) {
                const char = data.charCodeAt(i);
                hash = ((hash << 5) - hash) + char;
                hash = hash & hash; // Convert to 32-bit integer
            }
            return Math.abs(hash).toString(16);
        }

        function saveArChecklistData() {
            localStorage.setItem('fireArChecklistData', JSON.stringify(arChecklistData));
        }

        function loadArChecklistData() {
            const savedData = localStorage.getItem('fireArChecklistData');
            if (savedData) {
                const parsed = JSON.parse(savedData);
                // Merge with default data to handle new items
                arChecklistData = arChecklistItems.map(defaultItem => {
                    const savedItem = parsed.find(item => item.id === defaultItem.id);
                    return savedItem ? { ...defaultItem, ...savedItem } : { ...defaultItem, status: 'pending', notes: '', timestamp: null };
                });
            }
        }

        function showNotification(message, type = 'success') {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.className = `notification ${type}`;
            notification.classList.add('show');
            
            setTimeout(() => {
                notification.classList.remove('show');
            }, 3000);
        }

        // Enhanced Analytics Functions
        function updateAnalytics() {
            if (!settings.enableAnalytics) return;
            
            // Calculate compliance rate
            const totalChecked = checklistData.filter(item => item.status !== 'pending').length;
            const totalNormal = checklistData.filter(item => item.status === 'normal').length;
            const complianceRate = totalChecked > 0 ? Math.round((totalNormal / totalChecked) * 100) : 0;
            
            // Calculate risk score
            const abnormalCount = checklistData.filter(item => item.status === 'abnormal').length;
            const expiredExtinguishers = extinguishersData.filter(ext => new Date(ext.expiryDate) < new Date()).length;
            const riskScore = Math.min(100, (abnormalCount * 10) + (expiredExtinguishers * 15));
            
            // Calculate efficiency score
            const completionRate = Math.round((totalChecked / checklistData.length) * 100);
            const efficiencyScore = Math.max(0, 100 - riskScore);
            
            // Calculate maintenance score
            const activeExtinguishers = extinguishersData.filter(ext => ext.status === 'active').length;
            const maintenanceScore = extinguishersData.length > 0 ? Math.round((activeExtinguishers / extinguishersData.length) * 100) : 100;
            
            // Update display
            document.getElementById('complianceRate').textContent = `${complianceRate}%`;
            document.getElementById('riskScore').textContent = riskScore;
            document.getElementById('efficiencyScore').textContent = `${efficiencyScore}%`;
            document.getElementById('maintenanceScore').textContent = `${maintenanceScore}%`;
            
            // Update predictive analytics
            updatePredictiveAnalytics(riskScore, complianceRate);
        }

        function updatePredictiveAnalytics(riskScore, complianceRate) {
            const upcomingAlerts = document.getElementById('upcomingAlerts');
            const maintenanceRecommendations = document.getElementById('maintenanceRecommendations');
            const strategicRecommendations = document.getElementById('strategicRecommendations');
            
            // Upcoming alerts
            const expiringSoon = extinguishersData.filter(ext => {
                const daysUntilExpiry = Math.ceil((new Date(ext.expiryDate) - new Date()) / (1000 * 60 * 60 * 24));
                return daysUntilExpiry <= 30 && daysUntilExpiry > 0;
            }).length;
            
            if (expiringSoon > 0) {
                upcomingAlerts.textContent = `${expiringSoon} ถังจะหมดอายุใน 30 วัน`;
                upcomingAlerts.className = 'detail-status abnormal';
            } else {
                upcomingAlerts.textContent = 'ไม่มีการแจ้งเตือน';
                upcomingAlerts.className = 'detail-status normal';
            }
            
            // Maintenance recommendations
            const needMaintenance = extinguishersData.filter(ext => ext.status === 'maintenance').length;
            if (needMaintenance > 0) {
                maintenanceRecommendations.textContent = `${needMaintenance} ถังต้องบำรุงรักษา`;
                maintenanceRecommendations.className = 'detail-status abnormal';
            } else {
                maintenanceRecommendations.textContent = 'ไม่มีการแนะนำ';
                maintenanceRecommendations.className = 'detail-status normal';
            }
            
            // Strategic recommendations
            if (riskScore > 50) {
                strategicRecommendations.textContent = 'แนะนำให้ตรวจสอบระบบอย่างเร่งด่วน';
                strategicRecommendations.className = 'detail-status abnormal';
            } else if (complianceRate < 80) {
                strategicRecommendations.textContent = 'แนะนำให้เพิ่มความถี่ในการตรวจสอบ';
                strategicRecommendations.className = 'detail-status pending';
            } else {
                strategicRecommendations.textContent = 'ระบบทำงานปกติ';
                strategicRecommendations.className = 'detail-status normal';
            }
        }

        // Maintenance Management Functions
        function updateMaintenanceDisplay() {
            const today = new Date();
            
            // Calculate maintenance statistics
            const due = extinguishersData.filter(ext => {
                if (!ext.lastMaintenance) return true;
                const lastMaintenance = new Date(ext.lastMaintenance);
                const daysSince = Math.ceil((today - lastMaintenance) / (1000 * 60 * 60 * 24));
                return daysSince >= settings.maintenanceInterval;
            }).length;
            
            const overdue = extinguishersData.filter(ext => {
                if (!ext.lastMaintenance) return false;
                const lastMaintenance = new Date(ext.lastMaintenance);
                const daysSince = Math.ceil((today - lastMaintenance) / (1000 * 60 * 60 * 24));
                return daysSince > settings.maintenanceInterval + 30;
            }).length;
            
            const completed = maintenanceData.filter(task => task.status === 'completed').length;
            const scheduled = maintenanceData.filter(task => task.status === 'scheduled').length;
            
            // Update display
            document.getElementById('dueMaintenance').textContent = due;
            document.getElementById('overdueMaintenance').textContent = overdue;
            document.getElementById('completedMaintenance').textContent = completed;
            document.getElementById('scheduledMaintenance').textContent = scheduled;
            
            // Update maintenance tasks list
            updateMaintenanceTasksList();
        }

        function updateMaintenanceTasksList() {
            const container = document.getElementById('maintenanceTasksList');
            const today = new Date();
            
            // Generate maintenance tasks
            const tasks = [];
            
            extinguishersData.forEach(ext => {
                if (!ext.lastMaintenance) {
                    tasks.push({
                        id: `maint_${ext.id}`,
                        type: 'maintenance',
                        title: `บำรุงรักษาถัง ${ext.code}`,
                        description: 'ยังไม่มีประวัติการบำรุงรักษา',
                        priority: 'high',
                        dueDate: today,
                        extinguisherId: ext.id
                    });
                } else {
                    const lastMaintenance = new Date(ext.lastMaintenance);
                    const daysSince = Math.ceil((today - lastMaintenance) / (1000 * 60 * 60 * 24));
                    
                    if (daysSince >= settings.maintenanceInterval) {
                        tasks.push({
                            id: `maint_${ext.id}`,
                            type: 'maintenance',
                            title: `บำรุงรักษาถัง ${ext.code}`,
                            description: `ครบกำหนดบำรุงรักษา (${daysSince} วันแล้ว)`,
                            priority: daysSince > settings.maintenanceInterval + 30 ? 'critical' : 'medium',
                            dueDate: new Date(lastMaintenance.getTime() + (settings.maintenanceInterval * 24 * 60 * 60 * 1000)),
                            extinguisherId: ext.id
                        });
                    }
                }
                
                // Check expiry date
                const expiryDate = new Date(ext.expiryDate);
                const daysUntilExpiry = Math.ceil((expiryDate - today) / (1000 * 60 * 60 * 24));
                
                if (daysUntilExpiry <= 30 && daysUntilExpiry > 0) {
                    tasks.push({
                        id: `expiry_${ext.id}`,
                        type: 'expiry',
                        title: `เตรียมเปลี่ยนถัง ${ext.code}`,
                        description: `จะหมดอายุใน ${daysUntilExpiry} วัน`,
                        priority: daysUntilExpiry <= 7 ? 'critical' : 'high',
                        dueDate: expiryDate,
                        extinguisherId: ext.id
                    });
                }
            });
            
            if (tasks.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: #7f8c8d; font-style: italic;">ไม่มีงานบำรุงรักษาที่ต้องทำ</p>';
                return;
            }
            
            // Sort by priority and due date
            tasks.sort((a, b) => {
                const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };
                if (priorityOrder[a.priority] !== priorityOrder[b.priority]) {
                    return priorityOrder[b.priority] - priorityOrder[a.priority];
                }
                return new Date(a.dueDate) - new Date(b.dueDate);
            });
            
            container.innerHTML = '';
            tasks.forEach(task => {
                const taskElement = document.createElement('div');
                taskElement.className = 'detail-item';
                
                const priorityClass = {
                    critical: 'abnormal',
                    high: 'pending',
                    medium: 'normal',
                    low: 'normal'
                };
                
                taskElement.innerHTML = `
                    <div>
                        <div class="detail-name">${task.title}</div>
                        <div style="font-size: 0.9rem; color: #7f8c8d; margin-top: 5px;">${task.description}</div>
                        <div style="font-size: 0.8rem; color: #95a5a6; margin-top: 3px;">กำหนด: ${task.dueDate.toLocaleDateString('th-TH')}</div>
                    </div>
                    <div class="detail-status ${priorityClass[task.priority]}">${task.priority.toUpperCase()}</div>
                `;
                
                container.appendChild(taskElement);
            });
        }

        // Live Monitoring Functions
        function startLiveMonitoring() {
            if (liveAlertsInterval) {
                clearInterval(liveAlertsInterval);
            }
            
            liveAlertsInterval = setInterval(() => {
                updateLiveAlerts();
                if (settings.enableAnalytics) {
                    updateAnalytics();
                }
            }, 30000); // Update every 30 seconds
            
            // Initial update
            updateLiveAlerts();
        }

        function updateLiveAlerts() {
            const container = document.getElementById('liveAlerts');
            const alerts = [];
            
            // Check for critical issues
            const expiredExtinguishers = extinguishersData.filter(ext => new Date(ext.expiryDate) < new Date()).length;
            const abnormalItems = checklistData.filter(item => item.status === 'abnormal').length;
            const damagedExtinguishers = extinguishersData.filter(ext => ext.status === 'damaged').length;
            
            if (expiredExtinguishers > 0) {
                alerts.push({
                    type: 'critical',
                    message: `🚨 มีถังดับเพลิงหมดอายุ ${expiredExtinguishers} ถัง`,
                    class: 'abnormal'
                });
            }
            
            if (abnormalItems > 0) {
                alerts.push({
                    type: 'warning',
                    message: `⚠️ พบสิ่งผิดปกติ ${abnormalItems} รายการ`,
                    class: 'pending'
                });
            }
            
            if (damagedExtinguishers > 0) {
                alerts.push({
                    type: 'error',
                    message: `🔧 มีถังดับเพลิงชำรุด ${damagedExtinguishers} ถัง`,
                    class: 'abnormal'
                });
            }
            
            // Check for upcoming maintenance
            const needMaintenance = extinguishersData.filter(ext => {
                if (!ext.lastMaintenance) return true;
                const daysSince = Math.ceil((new Date() - new Date(ext.lastMaintenance)) / (1000 * 60 * 60 * 24));
                return daysSince >= settings.maintenanceInterval;
            }).length;
            
            if (needMaintenance > 0) {
                alerts.push({
                    type: 'info',
                    message: `📅 มีถังต้องบำรุงรักษา ${needMaintenance} ถัง`,
                    class: 'pending'
                });
            }
            
            if (alerts.length === 0) {
                container.innerHTML = `
                    <div class="detail-item">
                        <span class="detail-name">🟢 ระบบทำงานปกติ</span>
                        <span class="detail-status normal">ไม่มีการแจ้งเตือน</span>
                    </div>
                `;
            } else {
                container.innerHTML = '';
                alerts.forEach(alert => {
                    const alertElement = document.createElement('div');
                    alertElement.className = 'detail-item';
                    alertElement.innerHTML = `
                        <span class="detail-name">${alert.message}</span>
                        <span class="detail-status ${alert.class}">${alert.type.toUpperCase()}</span>
                    `;
                    container.appendChild(alertElement);
                });
            }
        }

        // Sample Data Initialization
        function initializeSampleData() {
            if (extinguishersData.length === 0) {
                // Add sample extinguishers
                const sampleExtinguishers = [
                    {
                        id: Date.now() + 1,
                        code: 'FE-001',
                        type: 'powder',
                        capacity: '6',
                        manufacturingDate: '2023-01-15',
                        expiryDate: '2025-01-15',
                        lastMaintenance: '2024-01-15',
                        status: 'active',
                        notes: 'ถังดับเพลิงหลัก ห้องประชุมใหญ่',
                        createdAt: new Date().toISOString()
                    },
                    {
                        id: Date.now() + 2,
                        code: 'FE-002',
                        type: 'co2',
                        capacity: '4',
                        manufacturingDate: '2022-06-10',
                        expiryDate: '2024-06-10',
                        lastMaintenance: '2023-12-01',
                        status: 'expired',
                        notes: 'ต้องเปลี่ยนใหม่',
                        createdAt: new Date().toISOString()
                    },
                    {
                        id: Date.now() + 3,
                        code: 'FE-003',
                        type: 'foam',
                        capacity: '10',
                        manufacturingDate: '2023-08-20',
                        expiryDate: '2026-08-20',
                        lastMaintenance: '',
                        status: 'maintenance',
                        notes: 'ต้องตรวจสอบความดัน',
                        createdAt: new Date().toISOString()
                    }
                ];
                
                extinguishersData = sampleExtinguishers;
                saveExtinguishersData();
            }
            
            if (locationsData.length === 0) {
                // Add sample locations
                const sampleLocations = [
                    {
                        id: Date.now() + 1,
                        code: 'LOC-001',
                        name: 'ห้องประชุมใหญ่',
                        floor: '2',
                        zone: 'โซน A',
                        risk: 'medium',
                        assignedExtinguisher: (Date.now() + 1).toString(),
                        description: 'ห้องประชุมหลักของบริษัท',
                        createdAt: new Date().toISOString()
                    },
                    {
                        id: Date.now() + 2,
                        code: 'LOC-002',
                        name: 'ห้องเซิร์ฟเวอร์',
                        floor: '1',
                        zone: 'โซน IT',
                        risk: 'high',
                        assignedExtinguisher: (Date.now() + 2).toString(),
                        description: 'ห้องเซิร์ฟเวอร์หลัก',
                        createdAt: new Date().toISOString()
                    }
                ];
                
                locationsData = sampleLocations;
                saveLocationsData();
            }
        }

        // Enhanced Data Loading Functions
        function loadMaintenanceData() {
            const savedData = localStorage.getItem('fireMaintenanceData');
            if (savedData) {
                maintenanceData = JSON.parse(savedData);
            }
        }

        function saveMaintenanceData() {
            localStorage.setItem('fireMaintenanceData', JSON.stringify(maintenanceData));
        }
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'9966026590df4b94',t:'MTc2MTc3NTg5My4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
!
,1